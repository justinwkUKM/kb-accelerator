{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "organizationName": {
      "type": "string",
      "metadata": {
        "description": "Enter the organization or company name"
      }
    },
    "applicationID": {
      "type": "string",
      "metadata": {
        "description": "App Registration Client ID"
      }
    },
    "applicationSecretKey": {
      "type": "securestring",
      "metadata": {
        "description": "App Registration Secret Key"
      }
    },
    "applicationName": {
      "type": "string",
      "defaultValue": "[toLower(split(parameters('organizationName'), ' ')[0])]",
      "metadata": {
        "description": "Auto-generated application name acronym. The application name to be used as a prefix for all resources."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "environmentType": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "prod"
      ]
    },
    "acrUsername": {
      "type": "string",
      "defaultValue": "fastapidemo",
      "metadata": {
        "description": "The username for the Azure Container Registry"
      }
    },
    "acrPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the Azure Container Registry"
      }
    },
    "appConfigName": {
      "type": "string",
      "defaultValue": "[format('app-config-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
          "description": "Name of the Azure App Configuration store"
      }
      },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('sa{0}{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Storage Account"
      }
    },
    "blobCogSearchContainerName": {
      "type": "string",
      "defaultValue": "[concat(parameters('applicationName'), 'docs')]",
      "metadata": {
        "description": "Azure Cognitive Search Container"
      }
    },
    "servicePlanName": {
      "type": "string",
      "defaultValue": "[format('asp-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the App Service Plan"
      }
    },
    "backendWebAppName": {
      "type": "string",
      "defaultValue": "[format('backend-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Linux Web App Backend"
      }
    },
    "frontendWebAppName": {
      "type": "string",
      "defaultValue": "[format('frontend-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Linux Web App Frontend"
      }
    },
    "managedIdentityName": {
      "type": "string",
      "defaultValue": "[format('mi-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Managed Identity"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[format('kv-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Key Vault"
      }
    },
    "appInsightsBE": {
      "type": "string",
      "defaultValue": "[format('ai-backend-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Application Insights Backend"
      }
    },
    "appInsightsBlob": {
      "type": "string",
      "defaultValue": "[format('ai-blobtrigger-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Application Insights Blob"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "defaultValue": "[format('workspace-log-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Log Analytics Workspace"
      }
    },
    "redisCacheName": {
      "type": "string",
      "defaultValue": "[format('redis-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Redis Cache"
      }
    },
    "functionAppName": {
      "type": "string",
      "defaultValue": "[format('blobtrigger-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Function App for Blob"
      }
    },
    "eventGridTopicName": {
      "type": "string",
      "defaultValue": "[format('gridtopic-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Event Grid Topic"
      }
    },
    "searchServiceName": {
      "type": "string",
      "defaultValue": "[format('search-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Azure Cognitive Search service"
      }
    },
    "documentIntelligenceName": {
      "type": "string",
      "defaultValue": "[format('doc-intel-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
          "description": "Name of the Azure Document Intelligence service"
      }
  },
  "languageServicesName": {
    "type": "string",
      "defaultValue": "[format('lang-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
    "metadata": {
      "description": "Name of the Azure Language service"
    }
  },
    "openAiServiceName": {
      "type": "string",
      "defaultValue": "[format('azure-openai-{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the Azure OpenAI service"
      }
    },
    "sqlAdminUsername": {
      "type": "string",
      "defaultValue": "[format('{0}user', parameters('applicationName'))]",
      "metadata": {
        "description": "SQL Server admin username"
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "defaultValue": "Admin12345",
      "metadata": {
        "description": "SQL Server admin password"
      }
    },
    "sqlDatabaseName": {
      "type": "string",
      "defaultValue": "[format('{0}-{1}', parameters('applicationName'), parameters('environmentType'))]",
      "metadata": {
        "description": "Name of the SQL Database"
      }
    },
    "projectCode": {
      "type": "string",
      "defaultValue": "[parameters('applicationName')]"
    },
    "owner": {
      "type": "string",
      "metadata": {
        "description": "Please enter your email."
      }
    }
  },
  "variables": {
      "appConfigSku": "standard",
      "acrFrontendImage": "knowledgebot-frontend:maaden",
      "acrBackendImage": "knowledgebot-backend:maaden",
      "acrLoginServer": "fastapidemo.azurecr.io"
  },
  "resources": [
    //////////Storage Account//////////
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": {
        "environment"     : "[parameters('environmentType')]",
        "application_name": "[parameters('applicationName')]",
        "project_code"    : "[parameters('projectCode')]",
        "owner"           : "[parameters('owner')]"
      },
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    //////////Create Storage Container//////////
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-08-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('blobCogSearchContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    //////////Create App Config//////////
    {
      "type": "Microsoft.AppConfiguration/configurationStores",
      "apiVersion": "2021-10-01-preview",
      "name": "[parameters('appConfigName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('appConfigSku')]"
      },
      "properties": {}
    },
    //////////Create App Config - containers//////////
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('{0}/containers', parameters('appConfigName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))]"
      ],
      "properties": {
        "value": "[concat('{\"', parameters('organizationName'), '\": \"', parameters('blobCogSearchContainerName'), '\"}')]",
        "contentType": "application/json"
      }
    },
    //////////Create App Config - groups//////////
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('{0}/groups', parameters('appConfigName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))]"
      ],
      "properties": {
        "value": "[concat('{\"kb-dev\": [\"', format('{0}-index', parameters('applicationName')), '\"]}')]",
        "contentType": "application/json"
      }
    },
    //////////Create App Config - indexes//////////
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('{0}/indexes', parameters('appConfigName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))]"
      ],
      "properties": {
        "value": "[concat('{\"', format('{0}-index', parameters('applicationName')), '\": \"', parameters('organizationName'), '\"}')]",
        "contentType": "application/json"
      }
    },
    //////////ASP//////////
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[parameters('servicePlanName')]",
      "location": "[parameters('location')]",
      "kind": "linux",
      "tags": {
        "environment"     : "[parameters('environmentType')]",
        "application_name": "[parameters('applicationName')]",
        "project_code"    : "[parameters('projectCode')]",
        "owner"           : "[parameters('owner')]"
      },
      "sku": {
        "name": "B3",
        "tier": "Basic"
      },
      "properties": {
        "reserved": true
      }
    },
    //////////Managed Identity//////////
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": {
        "environment"     : "[parameters('environmentType')]",
        "application_name": "[parameters('applicationName')]",
        "project_code"    : "[parameters('projectCode')]",
        "owner"           : "[parameters('owner')]"
      }
    },
    //////////Key Vault//////////
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": {
        "environment"     : "[parameters('environmentType')]",
        "application_name": "[parameters('applicationName')]",
        "project_code"    : "[parameters('projectCode')]",
        "owner"           : "[parameters('owner')]"
      },
      "properties": {
        "enableSoftDelete": false,
        "softDeleteRetentionInDays": 7,
        "enablePurgeProtection": true,
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(concat('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))).principalId]",
            "permissions": {
              "keys": [
                "get",
                "list"
              ],
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      }
    },
    //////////App Insight Backend//////////
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('appInsightsBE')]",
      "location": "[parameters('location')]",
      "tags": {
        "environment": "[parameters('environmentType')]",
        "application_name": "[parameters('applicationName')]",
        "project_code": "[parameters('projectCode')]",
        "owner": "[parameters('owner')]"
      },
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    //////////App Insight Blob//////////
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "name": "[parameters('appInsightsBlob')]",
      "location": "[parameters('location')]",
      "tags": {
        "environment"     : "[parameters('environmentType')]",
        "application_name": "[parameters('applicationName')]",
        "project_code"    : "[parameters('projectCode')]",
        "owner"           : "[parameters('owner')]"
      },
      "properties": {
        "Application_Type": "web",
        "publicNetworkAccessForIngestion": "Enabled"
      },
      "kind": "web"
    },
    //////////Log Analytics Workspace//////////
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "tags": {
        "environment"     : "[parameters('environmentType')]",
        "application_name": "[parameters('applicationName')]",
        "project_code"    : "[parameters('projectCode')]",
        "owner"           : "[parameters('owner')]"
      },
      "properties": {
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    //////////Redis Cache//////////
    {
      "type": "Microsoft.Cache/redis",
      "apiVersion": "2021-06-01",
      "name": "[parameters('redisCacheName')]",
      "location": "[parameters('location')]",
      "tags": {
        "environment"     : "[parameters('environmentType')]",
        "application_name": "[parameters('applicationName')]",
        "project_code"    : "[parameters('projectCode')]",
        "owner"           : "[parameters('owner')]"
      },
      "properties": {
        "sku": {
          "name": "Basic",
          "family": "C",
          "capacity": 0
        },
        "enableNonSslPort": false,
        "minimumTlsVersion": "1.2"
      }
    },
    //////////Eventgrid Topic//////////
    {
      "type": "Microsoft.EventGrid/topics",
      "apiVersion": "2021-12-01",
      "name": "[parameters('eventGridTopicName')]",
      "location": "[parameters('location')]",
      "properties": {
        "source": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "topicType": "Microsoft.Storage.StorageAccounts"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    //////////Search Service//////////
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2024-06-01-preview",
      "name": "[parameters('searchServiceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "basic"
      },
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1,
        "hostingMode": "default",
        "publicNetworkAccess": "Enabled",
        "semanticSearch": "free"
      }
    },
    //////////Azure OpenAI//////////
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2021-04-30",
      "name": "[parameters('openAiServiceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "S0"
      },
      "kind": "OpenAI",
      "properties": {
        "apiProperties": {
          "qnaMakerEndpoint": "https://[parameters('openAiServiceName')].cognitiveservices.azure.com"
        }
      }
    },
    //////////Azure OpenAI Language Service//////////
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2024-04-01-preview",
      "name": "[parameters('languageServicesName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "S"
      },
      "kind": "TextAnalytics",
      "properties": {
        "customSubDomainName": "[parameters('languageServicesName')]"
      }
    },
    //////////Azure Document Intelligence//////////
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2021-10-01",
      "name": "[parameters('documentIntelligenceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "S0"
      },
      "kind": "FormRecognizer",
      "properties": {}
    },
    //////////Azure OpenAI Deploy Embedding Model//////////
    {
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2022-03-01",
      "name": "[concat(parameters('openAiServiceName'), '/text-embedding-ada-002')]",
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiServiceName'))]"
      ],
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "text-embedding-ada-002",
          "version": "2"
        },
        "scaleSettings": {
          "scaleType": "Standard"
        }
      }
    },
    //////////Azure OpenAI Deploy GPT3.5 Model//////////
    {
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2022-03-01",
      "name": "[concat(parameters('openAiServiceName'), '/chatgpt')]",
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiServiceName'))]"
      ],
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "gpt-35-turbo",
          "version": "0613"
        },
        "scaleSettings": {
          "scaleType": "Standard"
        }
      }
    },
    //////////Azure OpenAI Deploy GPT4 Model//////////
    {
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2022-03-01",
      "name": "[concat(parameters('openAiServiceName'), '/chatgpt')]",
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiServiceName'))]"
      ],
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "gpt-4",
          "version": "1106-Preview"
        },
        "scaleSettings": {
          "scaleType": "Standard"
        }
      }
    },
    //////////SQL Server//////////
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2021-02-01-preview",
      "name": "[parameters('sqlServerName')]",
      "location": "[parameters('location')]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdminUsername')]",
        "administratorLoginPassword": "[parameters('sqlAdminPassword')]"
      }
    },
    //////////SQL DB//////////
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2021-02-01-preview",
      "name": "[concat(parameters('sqlServerName'), '/', parameters('sqlDatabaseName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "maxSizeBytes": 2147483648
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2023-08-01-preview",
      "name": "[concat(parameters('sqlServerName'), '/AllowAllWindowsAzureIps')]",
      "dependsOn": [
          "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
      ],
      "properties": {
          "startIpAddress": "0.0.0.0",
          "endIpAddress": "0.0.0.0"
      }
    },
    //////////Linux Webapp Frontend//////////
    {
      "type": "Microsoft.Web/sites",
        "apiVersion": "2022-09-01",
        "name": "[parameters('frontendWebAppName')]",
        "location": "[parameters('location')]",
        "tags": {
            "environment": "[parameters('environmentType')]",
            "application_name": "[parameters('applicationName')]",
            "project_code": "[parameters('projectCode')]",
            "owner": "[parameters('owner')]"
        },
        "kind": "app,linux,container",
        "dependsOn": [
            "[resourceId('Microsoft.Web/serverfarms', parameters('servicePlanName'))]"
        ],
        "properties": {
            "httpsOnly": true,
            "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('servicePlanName'))]",
            "siteConfig": {
            "alwaysOn": true,
            "linuxFxVersion": "[format('DOCKER|{0}/{1}', variables('acrLoginServer'), variables('acrFrontendImage'))]",
            "appSettings": [
            {
                "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                "value": "false"
            },
            {
                "name": "DOCKER_REGISTRY_SERVER_URL",
                "value": "[format('https://{0}', variables('acrLoginServer'))]"
            },
            {
                "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                "value": "[parameters('acrUsername')]"
            },
            { 
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD", 
              "value": "[parameters('acrPassword')]" 
            },
            {
              "name": "NEXTAUTH_SECRET",
              "value": "ZmPyZU/WBIa4oATeVrDnm/ZDnAq8dzVLtrbZZRcoMRg="
            },
            {
              "name": "NEXTAUTH_URL",
              "value": "[format('https://{0}.azurewebsites.net', parameters('frontendWebAppName'))]"
            },
            {
              "name": "AZURE_AD_CLIENT_ID",
              "value": "[parameters('applicationID')]"
            },
            {
              "name": "AZURE_AD_CLIENT_SECRET",
              "value": "[parameters('applicationSecretKey')]"
            },
            {
              "name": "AZURE_AD_TENANT_ID",
              "value": "[subscription().tenantId]"
            },
            {
              "name": "API_URL",
              "value": "[format('https://{0}.azurewebsites.net', parameters('backendWebAppName'))]"
            },
            {
              "name": "ARAB_IMAGE",
              "value": "https://res.cloudinary.com/lemon-mint/image/upload/v1721982067/arab4_h8chkz.png"
            },
            {
              "name": "PROMO_IMAGE",
              "value": "https://res.cloudinary.com/lemon-mint/image/upload/v1721982067/arab4_h8chkz.png"
            },
            {
              "name": "FEEDBACK_LINK",
              "value": ""
            },
            {
              "name": "INDEX_NAME",
              "value": "[format('{0}-index', parameters('applicationName'))]"
            },
            {
              "name": "ORGANIZATION_NAME",
              "value": "[parameters('organizationName')]"
            },
            {
              "name": "COMPANY_NAME",
              "value": "[parameters('organizationName')]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "18-lts"
            },
            { 
              "name": "WEBSITES_CONTAINER_START_TIME_LIMIT", 
              "value": "1800" 
            },
            {
              "name": "DOCKER_ENABLE_CI",
              "value": "true"
            }
          ]
        }
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    //////////Linux Webapp Backend//////////
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-12-01",
      "name": "[parameters('backendWebAppName')]",
      "location": "[parameters('location')]",
      "tags": {
        "environment": "[parameters('environmentType')]",
        "application_name": "[parameters('applicationName')]",
        "project_code": "[parameters('projectCode')]",
        "owner": "[parameters('owner')]"
      },
      "kind": "app,linux,container",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsBE'))]",
        "[resourceId('Microsoft.Web/serverfarms', parameters('servicePlanName'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('languageServicesName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))]",
        "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('sqlDatabaseName'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiServiceName'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]": {}
        }
      },
      "properties": {
        "httpsOnly": true,
        "keyVaultReferenceIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('servicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "[format('DOCKER|{0}/{1}', variables('acrLoginServer'), variables('acrBackendImage'))]",
          "alwaysOn": true,
          "vnetRouteAllEnabled": true,
          "appCommandLine": "python -m uvicorn main:app --host 0.0.0.0 --port 8000",
          "pythonversion": "3.10",
          "cors": {
            "allowedOrigins": [
                   "http://localhost:3000",
                   "[concat('https://', parameters('frontendWebAppName'), '.azurewebsites.net')]"
                ],
            "supportCredentials": true
          },
          "appSettings": [
            { "name": "ALLOWED_ORIGINS", "value": "[concat('https://', parameters('frontendWebAppName'), '.azurewebsites.net')]" },
            { "name": "DATABASE_HOST", "value": "[reference(resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))).fullyQualifiedDomainName]" },
            { "name": "DATABASE_HOSTNAME", "value": "[reference(resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))).fullyQualifiedDomainName]" },
            { "name": "DATABASE_DB", "value": "[parameters('sqlDatabaseName')]" },
            { "name": "DATABASE_USER", "value": "[parameters('sqlAdminUsername')]" },
            { "name": "DATABASE_PASSWORD", "value": "[parameters('sqlAdminPassword')]" },
            { "name": "ACCESS_TOKEN_EXPIRES_IN", "value": "15" },
            { "name": "REFRESH_TOKEN_EXPIRES_IN", "value": "60" },
            { "name": "JWT_ALGORITHM", "value": "HS256" },
            { "name": "AZURE_CLIENT_ID", "value": "[parameters('applicationID')]" },
            { "name": "AZURE_CLIENT_SECRET", "value": "[parameters('applicationSecretKey')]" },
            { "name": "AZURE_TENANT_ID", "value": "[subscription().tenantId]" },
            { "name": "AZURE_REDIS_CACHE_HOST", "value": "[reference(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName'))).hostName]" },
            { "name": "AZURE_REDIS_CACHE_PASSWORD", "value": "[listKeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2022-06-01').primaryKey]" },
            { "name": "AZURE_REDIS_CACHE_PORT", "value": "6380" },
            { "name": "AZURE_OPENAI_API_BASE", "value": "[format('https://{0}.openai.azure.com/', parameters('openAiServiceName'))]" },
            { "name": "AZURE_OPENAI_API_KEY", "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiServiceName')), '2021-04-30').key1]" },
            { "name": "AZURE_OPENAI_MODEL_GPT4_TURBO", "value": "gpt-4o" },
            { "name": "AZURE_OPENAI_MODEL_GPT35", "value": "gpt35-turbo" },
            { "name": "AZURE_OPENAI_EMBED_MODEL", "value": "ada-002" },
            { "name": "OPENAI_API_KEY", "value": "" },
            { "name": "OPENAI_API_VERSION", "value": "2024-04-01-preview" },
            { "name": "OPENAI_MODEL", "value": "gpt4-turbo" },
            { "name": "OPENAI_EMBED_MODEL", "value": "text-embedding-3-small" },
            { "name": "AZURE_COGNITIVE_SEARCH_ENDPOINT", "value": "[format('https://{0}.search.windows.net', parameters('searchServiceName'))]" },
            { "name": "AZURE_COGNITIVE_SEARCH_API_KEY", "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', parameters('searchServiceName')), '2024-06-01-preview').primaryKey]" },
            { "name": "SEARCH_SERVICE_NAME", "value": "[parameters('searchServiceName')]" },
            { "name": "AZURE_COGNITIVE_SEARCH_API_VERSION", "value": "2024-06-01-preview" },
            { "name": "AZURE_STORAGE_NAME", "value": "[parameters('storageAccountName')]" },
            { "name": "AZURE_STORAGE_KEY", "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-08-01').keys[0].value]" },
            { "name": "AZURE_STORAGE_CONNECTION_STRING", "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-08-01').keys[0].value)]" },
            { "name": "AZURE_BLOB_CONTAINER_NAME", "value": "[parameters('blobCogSearchContainerName')]" },
            { "name": "DOCUMENT_CHUNK_SIZE", "value": "1000" },
            { "name": "DOCUMENT_CHUNK_OVERLAP", "value": "100" },
            { "name": "DOCUMENT_K_TOP", "value": "5" },
            { "name": "UPLOAD_DOCUMENTS", "value": "False" },
            { "name": "INDEX_DOCUMENT", "value": "False" },
            { "name": "INDEX_NAME", "value": "[concat(parameters('applicationName'), '-index')]" },
            { "name": "ENABLE_JSON_INGESTION", "value": "True" },
            { "name": "ENBALE_SIMPLE_TEXT_INGESTION", "value": "True" },
            { "name": "ENABLE_TEXT_RAPTOR_INGESTION", "value": "False" },
            { "name": "ENABLE_TABLE_INGESTION", "value": "False" },
            { "name": "ENABLE_IMAGE_INGESTION", "value": "False" },
            { "name": "LANGCHAIN_API_KEY", "value": "" },
            { "name": "LANGCHAIN_PROJECT", "value": "" },
            { "name": "AZURE_APPINSIGHTS_INSTRUMENTATIONKEY", "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsBE'))).InstrumentationKey]" },
            { "name": "AZURE_APPINSIGHTS_CONNECTION_STRING", "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsBE'))).ConnectionString]" },
            { "name": "AZURE_APPCONFIG_ENDPOINT", "value": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))).endpoint]" },
            { "name": "AZURE_APPCONFIG_KEY", "value": "[listKeys(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName')), '2021-10-01-preview').value[0].value]" },
            { "name": "AZURE_APPCONFIG_CONNECTION_STRING", "value": "[listKeys(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName')), '2021-10-01-preview').value[0].connectionString]" },
            { "name": "AZURE_LANGUAGE_ENDPOINT", "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('languageServicesName'))).endpoint]" },
            { "name": "AZURE_LANGUAGE_KEY", "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('languageServicesName')), '2021-10-01').key1]" },
            { "name": "AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT", "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('documentIntelligenceName'))).endpoint]" },
            { "name": "AZURE_DOCUMENT_INTELLIGENCE_KEY", "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('documentIntelligenceName')), '2021-10-01').key1]" },
            { "name": "LOG_LEVEL", "value": "DEBUG" },
            { "name": "WEBSITES_CONTAINER_START_TIME_LIMIT", "value": "1800" },
            { "name": "MI_CLIENT_ID", "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))).clientId]" },
            { "name": "DOCKER_ENABLE_CI", "value": "True" },
            { "name": "DOCKER_REGISTRY_SERVER_USERNAME", "value": "[parameters('acrUsername')]" },
            { "name": "DOCKER_REGISTRY_SERVER_URL", "value": "[format('https://{0}', variables('acrLoginServer'))]" },
            { "name": "DOCKER_REGISTRY_SERVER_PASSWORD", "value": "[parameters('acrPassword')]" }
          ]
        }
      }
    },
    //////////Linux Function App//////////
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[parameters('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp,linux",
      "tags": {
        "environment"     : "[parameters('environmentType')]",
        "application_name": "[parameters('applicationName')]",
        "project_code"    : "[parameters('projectCode')]",
        "owner"           : "[parameters('owner')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsBlob'))]",
        "[resourceId('Microsoft.Web/serverfarms', parameters('servicePlanName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('servicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "Python|3.10",
          "vnetRouteAllEnabled": true,
          "alwaysOn": true,
          "pythonversion": "3.10",
          "appSettings": [
              {
                  "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                  "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsBlob'))).InstrumentationKey]"
              },
              {
                  "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                  "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsBlob'))).ConnectionString]"
              },
              {
                  "name": "AzureWebJobsStorage",
                  "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-08-01').keys[0].value)]"
              },
              {
                  "name": "FUNCTIONS_EXTENSION_VERSION",
                  "value": "~4"
              },
              {
                  "name": "FUNCTIONS_WORKER_RUNTIME",
                  "value": "python"
              },
              {
                  "name": "CONTAINER_NAME",
                  "value": "[parameters('blobCogSearchContainerName')]"
              },
              {
                  "name": "BACKEND_API_URL",
                  "value": "[concat('https://', parameters('backendWebAppName'), '.azurewebsites.net')]"
              },
              {
                  "name": "BACKEND_API_KEY",
                  "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value]"
              }
          ]
        }
      }
    }
  ]
}
